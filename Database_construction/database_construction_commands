### This file summarized the commands and programmes used for construction of blast and kraken2 database
### All blast and kraken2 analysis were conducted in the Gadi super computer from National Computational Infrastructure at the Australian National University.

# blast database construction. Three databases were constructed with blast.
# Construction of nt database
  update_blastdb.pl nt --decompress
  update_blastdb.pl taxdb --decompress

# Construction of RefSeq fungal database
# Step1: download RefSeq fungal genomic fna from https://ftp.ncbi.nlm.nih.gov/refseq/release/fungi/

# Step2: I manually constructed the taxonomy map using nucl_gb.accession2taxid from ncbi.
#        This is to only keep the accession.version and taxid columns, then remove the first line which is the header.
  cut -f 2,3 nucl_gb.accession2taxid | tail -n +2 > tax_map.txt
  
# Step3: construct the blast database using makeblastdb
  makeblastdb -in ./refseq_fungi.genomic.fna \
                -input_type fasta \
                  -parse_seqids \
                   -dbtype nucl \
                    -title refseq_fungi \
                      -out refseq_fungi \
                        -taxid_map ./tax_map.txt

# Construction of mock community database with three new genomes.
# Step1: modify the headers of the three new genome assemblies, adding the species name into the headers. These headers will be considered as accessions in blast.
  perl -pi -e "s/^>/>candida_rugosa_local_/g" medaka_consensus_rugosa.fasta
  perl -pi -e "s/^>/>candida_mesorugosa_local_/g" medaka_consensus_magnus.fasta
  perl -pi -e "s/^>/>cryptococcus_magnus_local_/g" medaka_consensus_mesorugosa.fasta

# Step2: grep all the headers from these new genomes into a new txt file, and add their taxid as another column to for update the tax_map (generated above).
#        I add the taxid column using python but generally you could use commandline or directly copy and paste.
#        taxid for candida rugosa is 5481, for candida mesorugosa is 1229076, for cryptococcus magnus is 104409
  grep '>' medaka_consensus_rugosa.fasta | cut -c 2- > candida_rugosa_headers.txt

# Step3: concatenate all genomes (fasta) downloaded from ncbi and the draft assemblies together using cat command.

# Step4: modify the tax_map.txt by adding the three headers with taxid txt files.
#        important note: The accession and taxid of candida auris (assembly ID: ASM118947v1) was missing in the nucl_gb.accession2taxid file at the time we downloaded.
#        so I mannually made the tax_map for it and add to the tax_map.txt
  cat tax_map.txt *_headers_updated.txt > tax_map_updated.txt

# Step5: mask the contaminatied regions according to Lu and Salzberg (2018). This step is a bit complicated which contains four steps itself.
#        first is to run a kraken analysis aganst standard database (database construction showed in the kraken database construction section), 
#        it contains RefSeq bacterial, archaeal, and viral domains, along with the human genome and a collection of known vectors (UniVec_Core)
  kraken2 --db k2_standard --threads 14 ./genome_reference_mock_final.fna > genome_reference_mock.standardkraken2_output
  
#        second is to mask those regions that found exact kmer matches.
#        to achieve this, I fist converted the kraken output file into bed file with python pandas module(separate script attached), then used bedtools to mask the fasta.
  python from_kraken2_to_bed.py
  bedtools maskfasta -fi genome_reference_mock_final.fna -fo genome_reference_mock_final.contaimination_masked.fna -bed genome_reference_mock_final.contamination_added.bed

#        third is to mask the low complex region using dustmasker from blast package
  dustmasker -in genome_reference_mock_final.contaimination_masked.fna -out genome_reference_mock_final.dustmasked.fna -outfmt fasta

#        fourth is to reformat the masked region with x and converted all lower cases to uper cases using sed command. This idea is from kraken2 masking process.
  sed -e '/^>/!s/[a-z]/x/g' genome_reference_mock_final.dustmasked.fna > genome_reference_mock_final.masked.fna
  
# Step6: make the mock community database with both masked fasta and updated taxonomy map
  makeblastdb -in ./genome_reference_mock_final.masked.fna \
                -input_type fasta \
                  -parse_seqids \
                    -dbtype nucl \
                      -title mock_com_all \
                        -out mock_com_all \
                          -taxid_map ./tax_map_updated.txt

# NOTE: an alternative way of making this custom database is to not add the tax_map.txt file but use the accessions for analysis later rather than using taxid.


# kraken2 database construction. Seven database were constructed in kraken2.
# First is to download taxonomic database for all the custom databases.
  kraken2-build --download-taxonomy --threads 1 --db $DBNAME
  
# For kraken2 standard database. The construction of standard database will also download the taxonomic database.
  kraken2-build --standard --db /k2_standard --threads 14
  
# For RefSeq fungal database. The fasta file is concatenated from above.
  kraken2-build --add-to-library refseq_fungi.fna --db /k2_fungi
  kraken2-build --build --db /k2_fungi --threads 14
  
# For ncbi nt database
  kraken2-build --download-library nt --threads 32 --db /k2_nt
  kraken2-build --build --db /k2_nt --thread 14

# I used the ncbi ITS database as an example for the construction of amplicon database in kraken2.
  kraken2-build --add-to-library fungi.ITS.fna --db /scratch/cq95/yh7166/db/k2_ncbi_ITS
  kraken2-build --build --db /scratch/cq95/yh7166/db/k2_ncbi_ITS --threads 14
# Below is a example output for successful construction of the amplicon database.
  Found 11449/11456 targets, searched through 750580161 accession IDs, search complete.
  lookup_accession_numbers: 7/11456 accession numbers remain unmapped, see unmapped.txt in DB directory
  Taxonomy parsed and converted.
  CHT created with 14 bits reserved for taxid.
  Completed processing of 11455 sequences, 6742938 bp
  Writing data to disk...  complete.

